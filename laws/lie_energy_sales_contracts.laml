# /laws/lie_energy_sales_contracts.laml

energy_sales_contracts_law(supplier, user, system) = institution(supplier, user, system) {
    # Type bindings for specific entities
    CRE_entity(cre) = Person(cre, legal)
    CFE_entity(grid) = Person(grid, legal)
    CENACE_entity(cenace) = Person(cenace, legal)
    State_entity(state) = Person(state, legal)
    
    # Energy sales and contracts acts
    sell_surplus(supplier, system, grid) = Person(supplier, legal), Thing(system, movable), CFE_entity(grid)
    celebrate_coverage_contract(supplier, coverage, cre) = Person(supplier, legal), Thing(coverage, movable), CRE_entity(cre)
    participate_auction(supplier, auction, cenace) = Person(supplier, legal), Thing(auction, movable), CENACE_entity(cenace)
    celebrate_market_contract(supplier, energy, participant) = Person(supplier, legal), Thing(energy, movable), Person(participant, legal)
    celebrate_clean_certificates(supplier, certificates, participant) = Person(supplier, legal), Thing(certificates, movable), Person(participant, legal)
    celebrate_participant_contract(supplier, market, cenace) = Person(supplier, legal), Thing(market, movable), CENACE_entity(cenace)
    sell_energy_exempt(supplier, energy, basic_supplier) = Person(supplier, legal), Thing(energy, movable), Person(basic_supplier, legal)
    buy_energy_exempt(basic_supplier, energy, supplier) = Person(basic_supplier, legal), Thing(energy, movable), Person(supplier, legal)
    offer_demand_control(supplier, demand, user) = Person(supplier, legal), Thing(demand, movable), Person(user, physical)
    celebrate_infrastructure_contract(state, infrastructure, supplier) = State_entity(state), Thing(infrastructure, movable), Person(supplier, legal)
    determine_contracts(state, infrastructure, supplier) = State_entity(state), Thing(infrastructure, movable), Person(supplier, legal)
    call_competitive_process(state, process, supplier) = State_entity(state), Thing(process, movable), Person(supplier, legal)
    
    # Conditional predicates
    has_supply_permit(supplier, cre) = Person(supplier, legal), CRE_entity(cre)
    market_participant_registered(supplier, cenace) = Person(supplier, legal), CENACE_entity(cenace)
    exempt_generator(supplier, basic_supplier) = Person(supplier, legal), Person(basic_supplier, legal)
    user_demand_controlable(supplier, user) = Person(supplier, legal), Person(user, physical)
    service_provider_non_compliance(state, supplier) = State_entity(state), Person(supplier, legal)
    interconnection_obligation(supplier, grid) = Person(supplier, legal), CFE_entity(grid)

    # @id: Cláusula Primera - Venta de Energía Excedente
    # @derives: LIE_ART21
    # @priority: HIGH
    rule_claim_sell_surplus = claim(sell_surplus(supplier, system, grid))

    # @id: Cláusula Segunda - Contratos de Cobertura Obligatorios (Condicional)
    # @derives: LIE_ART52
    # @priority: HIGH
    # Only if supplier has supply permit
    rule_oblig_coverage_contract = has_supply_permit(supplier, cre) 
                                   implies oblig(celebrate_coverage_contract(supplier, coverage, cre))

    # @id: Cláusula Tercera - Subastas de Cobertura (Condicional)
    # @derives: LIE_ART53
    # @priority: HIGH
    # Only if supplier has supply permit
    rule_right_auction_participation = has_supply_permit(supplier, cre) 
                                       implies claim(participate_auction(supplier, auction, cenace))

    # @id: Cláusula Cuarta - Contratos de Cobertura en Mercado (Condicional)
    # @derives: LIE_ART97
    # @priority: HIGH
    # Only if registered market participant
    rule_right_market_contract = market_participant_registered(supplier, cenace) 
                                 implies claim(celebrate_market_contract(supplier, energy, participant))

    # @id: Cláusula Quinta - Certificados de Energías Limpias (Condicional)
    # @derives: LIE_ART97
    # @priority: HIGH
    # Only if registered market participant
    rule_right_clean_certificates = market_participant_registered(supplier, cenace) 
                                    implies claim(celebrate_clean_certificates(supplier, certificates, participant))

    # @id: Cláusula Sexta - Contrato de Participante del Mercado (Condicional)
    # @derives: LIE_ART98
    # @priority: HIGH
    # Only if has market participation capacity
    rule_oblig_participant_contract = market_participant_registered(supplier, cenace) 
                                       implies oblig(celebrate_participant_contract(supplier, market, cenace))

    # @id: Cláusula Séptima - Ventas de Generadores Exentos (Condicional)
    # @derives: LIE_ART20
    # @priority: HIGH
    # Only if exempt generator
    rule_oblig_sell_exempt = exempt_generator(supplier, basic_supplier) 
                               implies oblig(sell_energy_exempt(supplier, energy, basic_supplier))

    # @id: Cláusula Octava - Contratos con Suministradores Básicos (Condicional)
    # @derives: LIE_ART21
    # @priority: HIGH
    # Only if exempt generator
    rule_right_buy_exempt = exempt_generator(supplier, basic_supplier) 
                            implies claim(buy_energy_exempt(basic_supplier, energy, supplier))

    # @id: Cláusula Novena - Contratos de Demanda Controlable (Condicional)
    # @derives: LIE_ART49
    # @priority: MEDIUM
    # Only if user has controllable demand
    rule_right_demand_control = user_demand_controlable(supplier, user) 
                                implies claim(offer_demand_control(supplier, demand, user))

    # @id: Cláusula Décima - Contratos de Infraestructura (Condicional)
    # @derives: LIE_ART30
    # @priority: MEDIUM
    # Only if state determines need
    rule_right_infrastructure_contract = service_provider_non_compliance(state, supplier) 
                                         implies claim(celebrate_infrastructure_contract(state, infrastructure, supplier))

    # @id: Cláusula Undécima - Determinación de Contratos (Condicional)
    # @derives: LIE_ART31
    # @priority: MEDIUM
    # Only if service provider non-compliance
    rule_right_determine_contracts = service_provider_non_compliance(state, supplier) 
                                      implies claim(determine_contracts(state, infrastructure, supplier))

    # @id: Cláusula Duodécima - Procesos Competitivos (Condicional)
    # @derives: LIE_ART32
    # @priority: MEDIUM
    # Only if contracts determined
    rule_oblig_competitive_process = service_provider_non_compliance(state, supplier) 
                                     implies oblig(call_competitive_process(state, process, supplier))
}
